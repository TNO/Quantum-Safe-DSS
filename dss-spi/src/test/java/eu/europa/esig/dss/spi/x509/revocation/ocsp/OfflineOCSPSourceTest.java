/**
 * DSS - Digital Signature Services
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 * 
 * This file is part of the "DSS - Digital Signature Services" project.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.esig.dss.spi.x509.revocation.ocsp;

import eu.europa.esig.dss.enumerations.CertificateStatus;
import eu.europa.esig.dss.enumerations.SignatureAlgorithm;
import eu.europa.esig.dss.enumerations.SignatureValidity;
import eu.europa.esig.dss.model.InMemoryDocument;
import eu.europa.esig.dss.model.x509.CertificateToken;
import eu.europa.esig.dss.model.x509.Token;
import eu.europa.esig.dss.model.x509.revocation.ocsp.OCSP;
import eu.europa.esig.dss.spi.DSSUtils;
import eu.europa.esig.dss.spi.x509.CertificateRef;
import eu.europa.esig.dss.spi.x509.revocation.RevocationToken;
import eu.europa.esig.dss.utils.Utils;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

public class OfflineOCSPSourceTest {

	private static final Logger LOG = LoggerFactory.getLogger(OfflineOCSPSourceTest.class);

	@Test
	public void testOCSPUniversign() {

		String ocspResponse = "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";

		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new ByteArrayInputStream(Utils.fromBase64(ocspResponse)));

		CertificateToken userUniversign = DSSUtils.loadCertificateFromBase64EncodedString(
				"MIIEjjCCA3agAwIBAgIQfCokxd5pp8RnZZOUHNbq0zANBgkqhkiG9w0BAQsFADBuMQswCQYDVQQGEwJGUjEgMB4GA1UEChMXQ3J5cHRvbG9nIEludGVybmF0aW9uYWwxHDAaBgNVBAsTEzAwMDIgNDM5MTI5MTY0MDAwMjYxHzAdBgNVBAMTFlVuaXZlcnNpZ24gQ0EgaGFyZHdhcmUwHhcNMTIwNzA2MTkzNzI0WhcNMTcwNzA2MTkzNzI0WjBrMQswCQYDVQQGEwJGUjERMA8GA1UEBxMITkFOVEVSUkUxFzAVBgNVBAoTDkFYQSBGUkFOQ0UgVklFMRcwFQYDVQQLEw4wMDAyIDMxMDQ5OTk1OTEXMBUGA1UEAxMOQVhBIEZSQU5DRSBWSUUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPbheD3Lk34Rv+SBwS3duDqzKNEHoNen48pzVbt6wFQf9bqpE9YPZh+jb+bnRUXLbv77vaWBfCZGOfrybDv/mqpmTkdYk6F+D7ddwQuF7OVmE+VqeOgoBc+Vo1LDzjowDPOmyH938DB1ZUzI8r2mw60rR9laqLI7kO6OT/9fodJMz1eE2G6LEzXvOj+V0PhDg3FX+vF+pLFUmI53x3L+zM8AZofUCY0oaUpY1hgWR4on5K1Oy0me63UHkslEjFS5jYff4EE+z/eZY7+e3FMqwzFm5al60w1djzsHUVod+CkIASs71VgAYSYOQyckwmKaFs6325JHAu5DH5a62WVqLnAgMBAAGjggEpMIIBJTA7BggrBgEFBQcBAQQvMC0wKwYIKwYBBQUHMAGGH2h0dHA6Ly9zY2FoLm9jc3AudW5pdmVyc2lnbi5ldS8wQgYDVR0gBDswOTA3BgsrBgEEAftLBQEDAjAoMCYGCCsGAQUFBwIBFhpodHRwOi8vZG9jcy51bml2ZXJzaWduLmV1LzBEBgNVHR8EPTA7MDmgN6A1hjNodHRwOi8vY3JsLnVuaXZlcnNpZ24uZXUvdW5pdmVyc2lnbl9jYV9oYXJkd2FyZS5jcmwwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMCBkAwHQYDVR0OBBYEFK13mc0NTbq7YVWmGWisLz2JJu57MB8GA1UdIwQYMBaAFGDkMN3uetTQfl0l2f07eyFkT927MA0GCSqGSIb3DQEBCwUAA4IBAQA7DWIeC3qTgW+OOsoYnzuwZxdu+F9eiqiVhq2UXx1vxjJQ6hthfq1Thzj5050fn5GQ/HeSNl05+hfoDpAK0JVWLssq1rrvBAx2lfgNWTG+LF581DVtH1I3NLi+A9YslvCPt51NVGAERhye6BZyugDlQCVhy6dRFhqSDSbi+S7RRqpIl/QDR/pBOwnBePO6qSpwSrDsCJT+N9nFBHmXpRsyFJyPEFZMIAVoluuJq4mCEGLVtqiC4DzvAwCsFBKlnwQ7pSFHO9ztXMYHpYhD/0wDSegwcvAVm7p8/N0PQDaAZQlWXs7McCBHeQPjxVD2xAkk7s9joicJ6kKttfxfEc6w");
		CertificateToken caUniversign = DSSUtils.loadCertificateFromBase64EncodedString(
				"MIIEYTCCA0mgAwIBAgIQIVWN4tmvyrr2CIjMBjGC1zANBgkqhkiG9w0BAQsFADB2MQswCQYDVQQGEwJGUjEgMB4GA1UEChMXQ3J5cHRvbG9nIEludGVybmF0aW9uYWwxHDAaBgNVBAsTEzAwMDIgNDM5MTI5MTY0MDAwMjYxJzAlBgNVBAMTHlVuaXZlcnNpZ24gUHJpbWFyeSBDQSBoYXJkd2FyZTAeFw0xMjA2MTUxMjU2MjVaFw0yMjA2MTUxMjU2MjVaMG4xCzAJBgNVBAYTAkZSMSAwHgYDVQQKExdDcnlwdG9sb2cgSW50ZXJuYXRpb25hbDEcMBoGA1UECxMTMDAwMiA0MzkxMjkxNjQwMDAyNjEfMB0GA1UEAxMWVW5pdmVyc2lnbiBDQSBoYXJkd2FyZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKHfv76grtwK9PRFTBq4BDtmmLaaHDAqkj1wd0lHIN2QH1jM6hKWeS4U/wy8QuYtvw0aFxYxiMWzS/vrj0Sczv5hAt8reE1Eg1uQcx6+aSUBqJ6a+1TbM7PtkHg1ozgbmVXGuiOLyviLhhUo8XmeeGEhux+cyRNiYCs37VPN5OVrKks29dspMkvllkexfrxiPfc+gB58EU+iNEcip/YrZLu4ZqErlCePIVBLyX9skb7QwKXDW8XBIgAzpoBj0U9/4Vxaiyj209xT1Uuz2vKsuT8Hq7I1vt7miYviHg/ovsWXH6yGcNomxX55l0qWQ4z+mGlVhCLDPMKmspY5D+1kSqsCAwEAAaOB8jCB7zA7BgNVHSAENDAyMDAGBFUdIAAwKDAmBggrBgEFBQcCARYaaHR0cDovL2RvY3MudW5pdmVyc2lnbi5ldS8wEgYDVR0TAQH/BAgwBgEB/wIBADBMBgNVHR8ERTBDMEGgP6A9hjtodHRwOi8vY3JsLnVuaXZlcnNpZ24uZXUvdW5pdmVyc2lnbl9wcmltYXJ5X2NhX2hhcmR3YXJlLmNybDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFGDkMN3uetTQfl0l2f07eyFkT927MB8GA1UdIwQYMBaAFE3Z/Kgtx8hapK1fSa5opNyeihIiMA0GCSqGSIb3DQEBCwUAA4IBAQAQrQJxwn+DBwN+KTt75IuOkaPOnZ+FfmF/1V7zDt3YNz7n1hRXlflbx9wBJn30TwyuTuZ/Cq1gEiA+TJMrsdZPKvagY8a/q7oCm6jYw6cBhopErwV/sZ9R3Ic+fphKSxoEnygpZs4uKMU2bB7nbul+sdJkP/OrIHKfHydMk3ayeAxnnieOj8EU+Z5w3fpekOGOtb4VUTESWU/xQfDZcNaauNRU2DYFi1eDypfVnyD8tORDoFVaAqzdIJuMJ06jJB5fnmNBXU7GOQFLcdK7hy3ZDmPNh5FNGnaQRrlY2st7lXfV3mu9AgHmjPjxrbAwgo1GzLRY0byI9bfitN0sLT+d");

		List<RevocationToken<OCSP>> ocspTokens = ocspSource.getRevocationTokens(userUniversign, caUniversign);
		assertEquals(1, ocspTokens.size());
		OCSPToken ocspToken = (OCSPToken) ocspTokens.get(0);

		assertNotNull(ocspToken);
		assertNotNull(ocspToken.getArchiveCutOff());
		assertNotNull(ocspToken.getThisUpdate());
		assertNotNull(ocspToken.getNextUpdate());
		assertNotNull(ocspToken.getProductionDate());
		assertNotNull(ocspToken.getBasicOCSPResp());
		assertNull(ocspToken.getExpiredCertsOnCRL());
		assertEquals(CertificateStatus.GOOD, ocspToken.getStatus());
		assertFalse(ocspToken.isCertHashPresent());
		assertFalse(ocspToken.isCertHashMatch());

		assertEquals(ocspToken, ocspSource.getRevocationToken(userUniversign, caUniversign));
	}

	@Test
	public void testOCSPWithDSSDocument() {
		String ocspResponse = "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";
		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new InMemoryDocument(Utils.fromBase64(ocspResponse)));

		CertificateToken userUniversign = DSSUtils.loadCertificateFromBase64EncodedString(
				"MIIEjjCCA3agAwIBAgIQfCokxd5pp8RnZZOUHNbq0zANBgkqhkiG9w0BAQsFADBuMQswCQYDVQQGEwJGUjEgMB4GA1UEChMXQ3J5cHRvbG9nIEludGVybmF0aW9uYWwxHDAaBgNVBAsTEzAwMDIgNDM5MTI5MTY0MDAwMjYxHzAdBgNVBAMTFlVuaXZlcnNpZ24gQ0EgaGFyZHdhcmUwHhcNMTIwNzA2MTkzNzI0WhcNMTcwNzA2MTkzNzI0WjBrMQswCQYDVQQGEwJGUjERMA8GA1UEBxMITkFOVEVSUkUxFzAVBgNVBAoTDkFYQSBGUkFOQ0UgVklFMRcwFQYDVQQLEw4wMDAyIDMxMDQ5OTk1OTEXMBUGA1UEAxMOQVhBIEZSQU5DRSBWSUUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPbheD3Lk34Rv+SBwS3duDqzKNEHoNen48pzVbt6wFQf9bqpE9YPZh+jb+bnRUXLbv77vaWBfCZGOfrybDv/mqpmTkdYk6F+D7ddwQuF7OVmE+VqeOgoBc+Vo1LDzjowDPOmyH938DB1ZUzI8r2mw60rR9laqLI7kO6OT/9fodJMz1eE2G6LEzXvOj+V0PhDg3FX+vF+pLFUmI53x3L+zM8AZofUCY0oaUpY1hgWR4on5K1Oy0me63UHkslEjFS5jYff4EE+z/eZY7+e3FMqwzFm5al60w1djzsHUVod+CkIASs71VgAYSYOQyckwmKaFs6325JHAu5DH5a62WVqLnAgMBAAGjggEpMIIBJTA7BggrBgEFBQcBAQQvMC0wKwYIKwYBBQUHMAGGH2h0dHA6Ly9zY2FoLm9jc3AudW5pdmVyc2lnbi5ldS8wQgYDVR0gBDswOTA3BgsrBgEEAftLBQEDAjAoMCYGCCsGAQUFBwIBFhpodHRwOi8vZG9jcy51bml2ZXJzaWduLmV1LzBEBgNVHR8EPTA7MDmgN6A1hjNodHRwOi8vY3JsLnVuaXZlcnNpZ24uZXUvdW5pdmVyc2lnbl9jYV9oYXJkd2FyZS5jcmwwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMCBkAwHQYDVR0OBBYEFK13mc0NTbq7YVWmGWisLz2JJu57MB8GA1UdIwQYMBaAFGDkMN3uetTQfl0l2f07eyFkT927MA0GCSqGSIb3DQEBCwUAA4IBAQA7DWIeC3qTgW+OOsoYnzuwZxdu+F9eiqiVhq2UXx1vxjJQ6hthfq1Thzj5050fn5GQ/HeSNl05+hfoDpAK0JVWLssq1rrvBAx2lfgNWTG+LF581DVtH1I3NLi+A9YslvCPt51NVGAERhye6BZyugDlQCVhy6dRFhqSDSbi+S7RRqpIl/QDR/pBOwnBePO6qSpwSrDsCJT+N9nFBHmXpRsyFJyPEFZMIAVoluuJq4mCEGLVtqiC4DzvAwCsFBKlnwQ7pSFHO9ztXMYHpYhD/0wDSegwcvAVm7p8/N0PQDaAZQlWXs7McCBHeQPjxVD2xAkk7s9joicJ6kKttfxfEc6w");
		CertificateToken caUniversign = DSSUtils.loadCertificateFromBase64EncodedString(
				"MIIEYTCCA0mgAwIBAgIQIVWN4tmvyrr2CIjMBjGC1zANBgkqhkiG9w0BAQsFADB2MQswCQYDVQQGEwJGUjEgMB4GA1UEChMXQ3J5cHRvbG9nIEludGVybmF0aW9uYWwxHDAaBgNVBAsTEzAwMDIgNDM5MTI5MTY0MDAwMjYxJzAlBgNVBAMTHlVuaXZlcnNpZ24gUHJpbWFyeSBDQSBoYXJkd2FyZTAeFw0xMjA2MTUxMjU2MjVaFw0yMjA2MTUxMjU2MjVaMG4xCzAJBgNVBAYTAkZSMSAwHgYDVQQKExdDcnlwdG9sb2cgSW50ZXJuYXRpb25hbDEcMBoGA1UECxMTMDAwMiA0MzkxMjkxNjQwMDAyNjEfMB0GA1UEAxMWVW5pdmVyc2lnbiBDQSBoYXJkd2FyZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKHfv76grtwK9PRFTBq4BDtmmLaaHDAqkj1wd0lHIN2QH1jM6hKWeS4U/wy8QuYtvw0aFxYxiMWzS/vrj0Sczv5hAt8reE1Eg1uQcx6+aSUBqJ6a+1TbM7PtkHg1ozgbmVXGuiOLyviLhhUo8XmeeGEhux+cyRNiYCs37VPN5OVrKks29dspMkvllkexfrxiPfc+gB58EU+iNEcip/YrZLu4ZqErlCePIVBLyX9skb7QwKXDW8XBIgAzpoBj0U9/4Vxaiyj209xT1Uuz2vKsuT8Hq7I1vt7miYviHg/ovsWXH6yGcNomxX55l0qWQ4z+mGlVhCLDPMKmspY5D+1kSqsCAwEAAaOB8jCB7zA7BgNVHSAENDAyMDAGBFUdIAAwKDAmBggrBgEFBQcCARYaaHR0cDovL2RvY3MudW5pdmVyc2lnbi5ldS8wEgYDVR0TAQH/BAgwBgEB/wIBADBMBgNVHR8ERTBDMEGgP6A9hjtodHRwOi8vY3JsLnVuaXZlcnNpZ24uZXUvdW5pdmVyc2lnbl9wcmltYXJ5X2NhX2hhcmR3YXJlLmNybDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFGDkMN3uetTQfl0l2f07eyFkT927MB8GA1UdIwQYMBaAFE3Z/Kgtx8hapK1fSa5opNyeihIiMA0GCSqGSIb3DQEBCwUAA4IBAQAQrQJxwn+DBwN+KTt75IuOkaPOnZ+FfmF/1V7zDt3YNz7n1hRXlflbx9wBJn30TwyuTuZ/Cq1gEiA+TJMrsdZPKvagY8a/q7oCm6jYw6cBhopErwV/sZ9R3Ic+fphKSxoEnygpZs4uKMU2bB7nbul+sdJkP/OrIHKfHydMk3ayeAxnnieOj8EU+Z5w3fpekOGOtb4VUTESWU/xQfDZcNaauNRU2DYFi1eDypfVnyD8tORDoFVaAqzdIJuMJ06jJB5fnmNBXU7GOQFLcdK7hy3ZDmPNh5FNGnaQRrlY2st7lXfV3mu9AgHmjPjxrbAwgo1GzLRY0byI9bfitN0sLT+d");

		List<RevocationToken<OCSP>> ocspTokens = ocspSource.getRevocationTokens(userUniversign, caUniversign);
		assertEquals(1, ocspTokens.size());
		OCSPToken ocspToken = (OCSPToken) ocspTokens.get(0);
		assertNotNull(ocspToken);
		assertEquals(ocspToken, ocspSource.getRevocationToken(userUniversign, caUniversign));
	}

	@Test
	public void testOCSPwithUnknownStatus() {

		String ocspResponse = "MIIFmgoBAKCCBZMwggWPBgkrBgEFBQcwAQEEggWAMIIFfDCBk6IWBBRG9FLh93YFoTCS3jTUkgpprd/GtRgPMjAxODAyMTMwNjMyNDhaMFMwUTA8MAkGBSsOAwIaBQAEFMzG72J5OVL0/31Lq6L3ZXYqftwTBBQ0Fhvx02RnYkyjNLwNs1OkfKHxFwIDC0wwggAYDzIwMTgwMjEzMDYzMjQ4WqETMBEwDwYJKwYBBQUHMAEJBAIFADANBgkqhkiG9w0BAQsFAAOCAQEAduyhdmJ1pxB6Y9wavgysICD2UjkusDLDNnj2xlNuYHK+c5OVdQ3XKxyUgdIVqNxxudVAmwtuX+vKFk7xjE16A27agZU2KO4llwpAVKrbYsrWMBj3FS/WJzTBk0G+SXKuSgDt5UkwfcZiUxmoMQBntWJTmVon0Ji2VJMALd0HzzEaVp47qqYGYtJX6L5HjvZIC7r/G5C3lEddBgmfNbSPei3EuBVRlLn8LZNLMk+49P7jNMHmlYt3InfSKwEiU18R1WGgQ5yrkyYxyMfhhBrjYZpptT0zs8AuwdAZb7xA4P7rrHgc6IMhQWXmRaKUWoJdOInKt1N59Hyl+mjk36kFQ6CCA84wggPKMIIDxjCCAq6gAwIBAgICHR0wDQYJKoZIhvcNAQELBQAwRDELMAkGA1UEBhMCTFUxFjAUBgNVBAoTDUx1eFRydXN0IHMuYS4xHTAbBgNVBAMTFEx1eFRydXN0IEdsb2JhbCBSb290MB4XDTE3MDYyNzEyMzMxNloXDTE4MDYyNzEyMzMxNlowXjELMAkGA1UEBhMCTFUxFjAUBgNVBAoTDUx1eFRydXN0IFMuQS4xEzARBgNVBAsTClBraSBlbnRpdHkxIjAgBgNVBAMTGUx1eFRydXN0IFMuQS4gT0NTUCBTZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDSFDnPz4sWi+w+xMVUWq74fDelftPUqXt+bofmeIgKKC9pZ4FNrT6FCd/N7kpRjRbtKkfBUMiv88jwUFcHMC75EESf0OPeqBlubRkeSwTj60FqB8bBK2aIauGQMFSSLF2emfVvBkpw/qjR9/0bxd1R4FQ7rcl4CyrRGd/jfca6vTAi+rqFI5bOaxKT0MUHVtegJtshmj8zHlOBpm+BG2udKcpx79KIHVVKEb2AyFYdZefXV65FkRLri7l7ew08UYHV90Dq1hI/uAc8IHauSKkGE0arCRwNcLrsfVUPoh41HK3pqs7bTFJ2qmZu2mobAdBqDJBnfTxN+oHZ4whVNh5RAgMBAAGjgacwgaQwCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwkwHwYDVR0jBBgwFoAUFxWFiQkvJIdvPx0b5PKWeYNIE84wMgYDVR0fBCswKTAnoCWgI4YhaHR0cDovL2NybC5sdXh0cnVzdC5sdS9MVEdSQ0EuY3JsMB0GA1UdDgQWBBRG9FLh93YFoTCS3jTUkgpprd/GtTANBgkqhkiG9w0BAQsFAAOCAQEANR/sq+gfaAtWqUXTbNFkisEan6abNbv9C8Pgt79rlDBkhAOOksyi/9tcfEZd5XqsMobIdaRZzAOlyN5SP5MgyZxSWmNArcqImofpg5RiIzbwewZzTIGaKh/xRrl8LkABKEhJ+tvTwrw0de2ad5nMUy2t2hCdO7Y5dMGzQRdJVnu10LcziEgZSW98C2SfdV3JxkW0rTsSi1vpRmSicpVxeEfbMvnlDKaMF17uM/eeTjqq7hsQOUbXPPbDOM8LcH0UmnkXkW6FVN4QDKjuKDlaL9bsRHJCuikebzwG+FOmKXhpHxMaUWLrRMvbeBIJvmd64LURIdhdjOt+Iho1lI4Oaw==";

		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new ByteArrayInputStream(Utils.fromBase64(ocspResponse)));

		CertificateToken userUniversign = DSSUtils.loadCertificateFromBase64EncodedString(
				"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");
		CertificateToken caUniversign = DSSUtils.loadCertificateFromBase64EncodedString(
				"MIID5zCCAs+gAwIBAgICDJcwDQYJKoZIhvcNAQELBQAwRDELMAkGA1UEBhMCTFUxFjAUBgNVBAoTDUx1eFRydXN0IHMuYS4xHTAbBgNVBAMTFEx1eFRydXN0IEdsb2JhbCBSb290MB4XDTExMTEyMjA5MzQyNFoXDTE3MTEyMjA5MzQyNFowTDELMAkGA1UEBhMCTFUxFjAUBgNVBAoTDUx1eFRydXN0IFMuQS4xJTAjBgNVBAMTHEx1eFRydXN0IEdsb2JhbCBRdWFsaWZpZWQgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCo0Cl9yek22xZb2PNZN0gIgx26qgQChKJ3az/r+qhAv/d/jVBLZy5mQvKRQFrvnLZp5gY5RzrgIcMyZxCwCitQ+MyLPiUYZ4mg/lUrHfOfhWRjYaJY4Dz+M69icdzAsKuVrfsurJ/UEmaIkGvgjBzeCd0qd8BXYnnt6GAT9bAsJ7Vh8lDyTho4D1mbude6jmupBTRNqW1TqnuzeJcooI8JAWkWZ0X4gGXzG0iZlC4irIlB/aaQiJoo+8QVr511T+zAJSJv2CpPS68dpL7AZBTw7/fhsyF84HcBf4tCH7Qhl9zFrdaWGdqrZiebSM4SeTBAnuuKUdYuuZyjoAHFnjj3AgMBAAGjgdowgdcwDwYDVR0TBAgwBgEB/wIBADBDBgNVHSAEPDA6MDgGCCuBKwEBAQoDMCwwKgYIKwYBBQUHAgEWHmh0dHBzOi8vcmVwb3NpdG9yeS5sdXh0cnVzdC5sdTALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUFxWFiQkvJIdvPx0b5PKWeYNIE84wMgYDVR0fBCswKTAnoCWgI4YhaHR0cDovL2NybC5sdXh0cnVzdC5sdS9MVEdSQ0EuY3JsMB0GA1UdDgQWBBQ0Fhvx02RnYkyjNLwNs1OkfKHxFzANBgkqhkiG9w0BAQsFAAOCAQEAGPCWTo1SQy6Kmpwin+GaWVW9h2JO3Qwr6qVwZAQHXPhZGQTD+ghIxN949SGyoMmkGTvJjOSaIs8qJ5lGtDWJuy056rN5FCc2P+0qYofpGdNgSkyRY3xtuKteEPcoi+eFBphY+dlilSPXm3j6Vp/6BRb70Zd35O1Zic95ZUNCxDDVkaDbuN9tjGIBKhnq/ExtpheEdZJPjppVXpsBrCUUpJ0A9oSSFOQewwKSMD/vJKF32M9A2TlRd62XdHeNJrahdU/tO55f9tz3ekl/aKoS2khJxMfBvdvlw2Yc2g02g5rYsBxrSphph6IjqIkALM95jbm9T2Xo2CSROTAtprdhKw==");

		List<RevocationToken<OCSP>> ocspTokens = ocspSource.getRevocationTokens(userUniversign, caUniversign);
		assertEquals(1, ocspTokens.size());
		OCSPToken ocspToken = (OCSPToken) ocspTokens.get(0);

		assertNotNull(ocspToken);
		assertNull(ocspToken.getArchiveCutOff());
		assertNotNull(ocspToken.getThisUpdate());
		assertNotNull(ocspToken.getProductionDate());
		assertNotNull(ocspToken.getBasicOCSPResp());
		assertNull(ocspToken.getExpiredCertsOnCRL());
		assertFalse(ocspToken.isCertHashPresent());
		assertNull(ocspToken.getReason());
		assertNull(ocspToken.getRevocationDate());
		assertEquals(CertificateStatus.UNKNOWN, ocspToken.getStatus());
	}

	@Test
	public void testOCSPCertHash() {

		CertificateToken user = DSSUtils.loadCertificate(new File("src/test/resources/sk_user.cer"));
		CertificateToken caToken = DSSUtils.loadCertificate(new File("src/test/resources/sk_ca.cer"));
		assertTrue(user.isSignedBy(caToken));

		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource("/sk_ocsp.bin");

		List<RevocationToken<OCSP>> ocspTokens = ocspSource.getRevocationTokens(user, caToken);
		assertEquals(1, ocspTokens.size());
		OCSPToken ocspToken = (OCSPToken) ocspTokens.get(0);
		assertNotNull(ocspToken);
		assertNotNull(ocspToken.getRevocationDate());

		assertTrue(ocspToken.isCertHashPresent());
		assertTrue(ocspToken.isCertHashMatch());
	}

	@Test
	public void pss() {
		String user = "MIIIujCCBnKgAwIBAgIQMvhgOMxbzNo2TwepM/QLKTA9BgkqhkiG9w0BAQowMKANMAsGCWCGSAFlAwQCA6EaMBgGCSqGSIb3DQEBCDALBglghkgBZQMEAgOiAwIBQDBbMQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMRwwGgYDVQQDExNELVRSVVNUIENBIDMtMSAyMDE2MRcwFQYDVQRhEw5OVFJERS1IUkI3NDM0NjAeFw0xOTAxMTcwNjE3NDRaFw0yMjAxMTcwMDAwMDBaMGoxCzAJBgNVBAYTAkRFMRgwFgYDVQQDEw9NYXR0aGlhcyBIZWxsZXIxETAPBgNVBCoTCE1hdHRoaWFzMQ8wDQYDVQQEEwZIZWxsZXIxHTAbBgNVBAUTFERUUldNNjQ1NzcxNDE5NDQyMzIyMIIBpDANBgkqhkiG9w0BAQEFAAOCAZEAMIIBjAKCAYEAlM6XiJL+ARZpciuaIm1i4yBpg4kF9FZY1RWZKJz1l8fp+O4DUVdE/FlHzCBufxER5AmxqXA8dbiZo83ODYocAGGOu1Ettnr519Q25KGGeqOW6P9AIIn27HEincF5kX81zP3AMbihKsjrW3+4jiYlC3goiDQ1D/6Ete4NNnUU/t686fmXASjCFFf/fLz9K63nU08TNcIRHQVvjPzNUcVhRObxFrdE3KeQ36Kjy1Gab7zCyfUxpUDj4b3zo0a6cSAHOYDpslbX3CPh3Gdogb5scg+O5JZC90CKjP2XI6k/yzhhfytySaAEcf7wUjs7hHEijsQdhpMdB3AZ+1OeAdgtgn/P1TWrSbATxrXtHG1XHIY8p1e6xCILmYwQovVnKbgMuA2uTmPdlCYuqdClkajfjlseKSosHyHx7u2G+TgV1V5yfXUlqhlkFkVncqhrJg4buLJl4teg2bZRWtickRwUYW+Q4k1TsR9DFofsYap1sl+Jy9zOJuPUsAbVT5pTiaGBAgUAxcotnaOCA4cwggODMB8GA1UdIwQYMBaAFPvt361L8CW10nrdn5odL20JUCHHMIHNBggrBgEFBQcBAwSBwDCBvTAIBgYEAI5GAQEwCAYGBACORgEEMIGRBgYEAI5GAQUwgYYwQRY7aHR0cDovL3d3dy5kLXRydXN0Lm5ldC9pbnRlcm5ldC9maWxlcy9ELVRSVVNUX1BLSV9EU19ERS5wZGYTAkRFMEEWO2h0dHA6Ly93d3cuZC10cnVzdC5uZXQvaW50ZXJuZXQvZmlsZXMvRC1UUlVTVF9QS0lfRFNfRU4ucGRmEwJFTjATBgYEAI5GAQYwCQYHBACORgEGATCB+gYIKwYBBQUHAQEEge0wgeowMwYIKwYBBQUHMAGGJ2h0dHA6Ly9kdHItY2EtMy0xLTIwMTYub2NzcC5kLXRydXN0Lm5ldDBCBggrBgEFBQcwAoY2aHR0cDovL3d3dy5kLXRydXN0Lm5ldC9jZ2ktYmluL0QtVFJVU1RfQ0FfMy0xXzIwMTYuY3J0MG8GCCsGAQUFBzAChmNsZGFwOi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJVU1QlMjBDQSUyMDMtMSUyMDIwMTYsTz1ELVRydXN0JTIwR21iSCxDPURFP2NBQ2VydGlmaWNhdGU/YmFzZT8wcQYDVR0gBGowaDAJBgcEAIvsQAECMFsGCysGAQQBpTQCgRYBMEwwSgYIKwYBBQUHAgEWPmh0dHA6Ly93d3cuZC10cnVzdC5uZXQvaW50ZXJuZXQvZmlsZXMvRC1UUlVTVF9Sb290X1BLSV9DUFMucGRmMIHwBgNVHR8EgegwgeUwgeKggd+ggdyGaWxkYXA6Ly9kaXJlY3RvcnkuZC10cnVzdC5uZXQvQ049RC1UUlVTVCUyMENBJTIwMy0xJTIwMjAxNixPPUQtVHJ1c3QlMjBHbWJILEM9REU/Y2VydGlmaWNhdGVyZXZvY2F0aW9ubGlzdIYyaHR0cDovL2NybC5kLXRydXN0Lm5ldC9jcmwvZC10cnVzdF9jYV8zLTFfMjAxNi5jcmyGO2h0dHA6Ly9jZG4uZC10cnVzdC1jbG91ZGNybC5uZXQvY3JsL2QtdHJ1c3RfY2FfMy0xXzIwMTYuY3JsMB0GA1UdDgQWBBQ4aQJEqXGUOav7kBJgEC2BFM8PPjAOBgNVHQ8BAf8EBAMCBkAwPQYJKoZIhvcNAQEKMDCgDTALBglghkgBZQMEAgOhGjAYBgkqhkiG9w0BAQgwCwYJYIZIAWUDBAIDogMCAUADggIBAIxbA2SgrJ0PFUhD6Dw3LTqLPGbCEnJty67qa3tVDY670MHenvI5k+55cn+mZp07+5IDo8b67F00qoSxb++zTLBIWUxMAlV1frjSJ5hmK3WWAoQFIkvgBCVTBmoJTtf4cA1yI0XXBRrrjd4yokcZAyOgd84y25K+jEcta1+hZ+4QKwfFd69YJbUT50brD8aFvPgsHGxm9noNX1+nyeA7EzJMaqQq3uwB88FfQSH2mdXgtyUqh/pA7XODY+ZCPORf1gVZYlu9K3s8xokQ/6oBPp+MPlHcgsxyufrLM7ZHu5Ko7USpkuetHgg3jIsETght2s7ypcwPjukt6aL1GrGxUBXwd/GO8elr6d5Th0YBcYLDCCsLs84pagNrbu3E22tx7/ZEqVNLrDvyIGG+aFQvygfZxVxD7uVEl3dGZKcuZih4Pr+iaBQv1ptjQovF9xkhTh6r3CPftApxZdwb0wH1ag4dIanTZN9RWQWnsHVkeDC7OixdEaPl+ZLVwigdJ+0xuNKV1ZW1DAtgcv8fiL2ItlW6xlEFubfD5Ql1CpGdiYtgMU4PqkK4z98VHq7XYTwmTxbbiQ5aJOOPrawysj55Lei6zXDmFwiwVS9lJV22y1BsUw7U/0tWAVTVkYkX0a/OevKeYLnIOVD57L+1ToaDRgocV0Mml1hfwfXem0GCSM7g";
		String ca = "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";
		String ocspResponse = "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";

		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new ByteArrayInputStream(Utils.fromBase64(ocspResponse)));

		CertificateToken certUser = DSSUtils.loadCertificateFromBase64EncodedString(user);
		CertificateToken certCA = DSSUtils.loadCertificateFromBase64EncodedString(ca);

		List<RevocationToken<OCSP>> ocspTokens = ocspSource.getRevocationTokens(certUser, certCA);
		assertEquals(1, ocspTokens.size());
		OCSPToken ocspToken = (OCSPToken) ocspTokens.get(0);

		assertEquals(SignatureAlgorithm.RSA_SSA_PSS_SHA256_MGF1, ocspToken.getSignatureAlgorithm());
		assertEquals(SignatureValidity.VALID, ocspToken.getSignatureValidity());
		assertTrue(ocspToken.isSignatureIntact());
		assertTrue(ocspToken.isValid());
		assertEquals(1, ocspToken.getOCSPTokenVersion());
		assertTrue(ocspToken.isCertHashPresent());
		assertTrue(ocspToken.isCertHashMatch());
		assertEquals(CertificateStatus.GOOD, ocspToken.getStatus());
		assertNull(ocspToken.getReason());
		assertNull(ocspToken.getRevocationDate());
	}
	
	@Test
	public void multipleSingleResps() {
		String ocspResponse = "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 ";

		CertificateToken user1 = DSSUtils.loadCertificateFromBase64EncodedString(
				"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");
		CertificateToken ca1 = DSSUtils.loadCertificateFromBase64EncodedString(
				"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");
		CertificateToken user2 = ca1;
		CertificateToken ca2 = DSSUtils.loadCertificateFromBase64EncodedString(
				"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");

		LOG.info("{}", user1);
		LOG.info("{}", ca1);
		LOG.info("{}", ca2);

		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new ByteArrayInputStream(Utils.fromBase64(ocspResponse)));

		List<RevocationToken<OCSP>> ocspTokens = ocspSource.getRevocationTokens(user1, ca1);
		assertEquals(1, ocspTokens.size());
		OCSPToken ocspUser1 = (OCSPToken) ocspTokens.get(0);

		assertNotNull(ocspUser1);
		assertTrue(ocspUser1.isSignatureIntact());
		assertTrue(ocspUser1.isValid());
		assertFalse(ocspUser1.isSignedBy(ca1));

		List<CertificateToken> certificates = ocspUser1.getCertificateSource().getCertificates();
		assertEquals(1, certificates.size());
		CertificateToken ocspResponderCert = certificates.get(0);
		assertTrue(ocspUser1.isSignedBy(ocspResponderCert));

		ocspTokens = ocspSource.getRevocationTokens(user2, ca2);
		assertEquals(1, ocspTokens.size());
		OCSPToken ocspUser2 = (OCSPToken) ocspTokens.get(0);

		assertNotNull(ocspUser2);
		assertTrue(ocspUser2.isSignatureIntact());
		assertTrue(ocspUser2.isValid());
		assertFalse(ocspUser2.isSignedBy(ca2));
		assertTrue(ocspUser2.isSignedBy(ocspResponderCert));

		LOG.info("{}", ocspUser1);
		LOG.info("{}", ocspUser2);

		assertEquals(1, ocspSource.getAllRevocationBinaries().size());
		Set<RevocationToken<OCSP>> allRevocationTokens = ocspSource.getAllRevocationTokens();
		assertEquals(2, allRevocationTokens.size());

		List<String> ids = allRevocationTokens.stream().map(Token::getDSSIdAsString).collect(Collectors.toList());
		assertEquals(2, ids.size());
		assertEquals(ids.get(0), ids.get(1));

		assertEquals(0, ocspSource.getAllRevocationReferences().size());
	}

	@Test
	public void testKeyHash() {
		CertificateToken toCheckToken = DSSUtils.loadCertificate(new File("src/test/resources/peru_client.cer"));
		CertificateToken caToken = DSSUtils.loadCertificate(new File("src/test/resources/peru_CA.cer"));
		assertTrue(toCheckToken.isSignedBy(caToken));

		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource("/peru_ocsp.bin");
		List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(toCheckToken, caToken);
		assertEquals(1, revocationTokens.size());
		RevocationToken<OCSP> revocationToken = revocationTokens.get(0);
		assertNotNull(revocationToken.getPublicKeyOfTheSigner());

		Set<CertificateRef> allCertificateRefs = revocationToken.getCertificateSource().getAllCertificateRefs();
		assertEquals(1, allCertificateRefs.size());

		CertificateRef certificateRef = allCertificateRefs.iterator().next();
		assertNotNull(certificateRef.getResponderId());
		assertNotNull(certificateRef.getResponderId().getSki());
	}

	@Test
	public void testWithMultipleOCSPTokens() {
		CertificateToken certToken = DSSUtils.loadCertificateFromBase64EncodedString("MIID1DCCArygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjAwNDIyMTUzMDA4WhcNMjIwMjIyMTYzMDA4WjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKYO5OOxN//Q5bteod82QcDXssyCD6EXMuvGcmkcybrGij0eKITwg4QxiH/6I20P1Huv9Iw3IGmluhzRHMn3k4+pwVM6U7s/bIT9QZBvtLXC9ElIuS6immXPOKyjyyileeoKz8Ttv54/rtiqhZa8zX+3xXJ2mMI4f/EAbsM7XdAxsLhMq0MfpRXo3GsOgjWIaRmKkxEWz4mBtgW2B0tFZdC395rbVdlkH/hgn+oEC7ciXSqlni0vwPiI73Waa3iBv+QPNDXDVQXg/Ont7FJc1/6gaTnP57/zAz+xQMM8PF8Key9hBuXnxKV/FjC/y0Mb3fNAfkWkwPFziDJavRXfj8MCAwEAAaOBvDCBuTAOBgNVHQ8BAf8EBAMCBkAwgYcGCCsGAQUFBwEBBHsweTA5BggrBgEFBQcwAYYtaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3Rvcnkvb2NzcC9nb29kLWNhMDwGCCsGAQUFBzAChjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcnQvZ29vZC1jYS5jcnQwHQYDVR0OBBYEFNzF6OF04bgVI8auOvXQk3QOaP/LMA0GCSqGSIb3DQEBCwUAA4IBAQDLtIiIuxyUlfkUIrApCCiRYyEeA1N0eGjqG2EfIGZtDEpRxzYM7hL/K96Df3eEtP76gSWto6/2nlcUNT9wpcCWTAvMMMycrbYNyEixCyMzuxpEe/0eU3+4D7YtMYcCsASh0Wg5T2Dttx1gVQrDB8fbM02BSdH/7FTcKDh1bcnOc8McxZrDN9IHi0GXQnEphwPqBmUM+lPa6eGBO0m/4moRZAED6+V+EQL8QRTT/AKxD8RlBUCJhhYtsvhl8uD8TdYBf7uAt2k2Rp5bTbvwKPPOJEGosvjG1A/gd43isijMhcD7uF2JCEwo9P3Pb3g+U37QoRBseWp1tErSM8N3m8Xl");
		CertificateToken caToken = DSSUtils.loadCertificateFromBase64EncodedString("MIID6jCCAtKgAwIBAgIBBDANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjAwNDIyMTUzMDA2WhcNMjIwMjIyMTYzMDA2WjBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQuv1r3qUKO8M1NJ9zhXBm0X5kYzvbNlqsY5kH9cxQDc9oKLFJ+/m9TihsYt+Uw06EMahu6uejcRQFvUJNwEgHDDQ/kzo53kFfhX53GxZFgEvnQXcc4DTkANHspvUzMoEadHJBtkD/Y+pb99uXOmzMG+eC1N41MxKmnd30cc0Z8HTIWlYlW8/pq+FHO/6oVwvU7BrOKK7sMlAGzfQ0eNtaUjDPN0lnf/AXNLt3bh8I2wtTpf+zEf4TIEkUDIdTWwtKlbjkHRDfljzGGeBLcw8QN4HY72AkLE6jaNfIKQ7l5FgiRJKEdLDASxKDUEMHBam4gu+1FxebtsyAjvxLwJOBAgMBAAGjgdQwgdEwDgYDVR0PAQH/BAQDAgEGMEEGA1UdHwQ6MDgwNqA0oDKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NybC9yb290LWNhLmNybDBMBggrBgEFBQcBAQRAMD4wPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9yb290LWNhLmNydDAdBgNVHQ4EFgQUSva2Hgkel64xzaVSMNW9002bn78wDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAWz7olSj8/yyL7ydRsjsSAiw0rXTfV5AYymFsm5cNsPDFyurKTgq8WLOSSbedRcD1vhnNNkN/V4YdU5u/hK34jcDgoHRECAZET8Qahu3Q+CPNf1KWfkTQNME+CV8g16WW+rgFhHHITt/1WRNv1TwUnQ6hNESmhzXTZ/3S88nUz8oWm2nliXj0YQ2QGTZwEZOVl9crRLNLIKEkp6/A71pncgZgMfapZdF902l1BsvoP+geUCAQX1V2m767DTfkE3yST1Cw2l9x4VyZ7Dar3HkFPhIDhhFliXD/aXcAluhR9T8ehZt29xIrnMZZXFYtJfRKfn8pu8ostb8vVsTrXWdQTA==");

		String ocspOneBinaries = "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";
		String ocspTwoBinaries = "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";

		ExternalResourcesOCSPSource ocspSource = null;
		try (InputStream baisOneOcsp = new ByteArrayInputStream(Utils.fromBase64(ocspOneBinaries));
			 InputStream baisTwoOcsp = new ByteArrayInputStream(Utils.fromBase64(ocspTwoBinaries))) {
			ocspSource = new ExternalResourcesOCSPSource(baisOneOcsp, baisTwoOcsp);
		} catch (IOException e) {
			fail(e);
		}
		assertNotNull(ocspSource);

		List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(certToken, caToken);
		assertEquals(2, revocationTokens.size());

		RevocationToken<OCSP> lastRevocationToken = ocspSource.getRevocationToken(certToken, caToken);
		assertArrayEquals(Utils.fromBase64(ocspTwoBinaries), lastRevocationToken.getEncoded());

		// change order

		try (InputStream baisOneOcsp = new ByteArrayInputStream(Utils.fromBase64(ocspOneBinaries));
			 InputStream baisTwoOcsp = new ByteArrayInputStream(Utils.fromBase64(ocspTwoBinaries))) {
			ocspSource = new ExternalResourcesOCSPSource(baisTwoOcsp, baisOneOcsp);
		} catch (IOException e) {
			fail(e);
		}
		assertNotNull(ocspSource);

		revocationTokens = ocspSource.getRevocationTokens(certToken, caToken);
		assertEquals(2, revocationTokens.size());

		lastRevocationToken = ocspSource.getRevocationToken(certToken, caToken);
		assertArrayEquals(Utils.fromBase64(ocspTwoBinaries), lastRevocationToken.getEncoded());
	}

	@Test
	public void invalidOCSPVersionTest() {
		CertificateToken certToken = DSSUtils.loadCertificateFromBase64EncodedString("MIID1jCCAr6gAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjIwMjE3MTQ0OTMwWhcNMjMxMjE3MTQ0OTMwWjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN+R+tNSL7FBS2P1nfXbqpgEufk2BAjJQHBOUTmT0UB5rnYF1Vmk6CtL3pQWbg6KcZ4yPAyn0mGcjYPSJaZinpgH3CYf6Gug75lz7VGWAqxkeUZZFMaEjw/stUrqKjFp1+wtEt8Oml4vtra6cZXX0Hxn0G4M7+gEIGjd/pATguetnlxh1iL7FAs6Wd6qaAlJ30N5fLlgGXPON3ea8QtayGhygIBHw8x2nm9pNiIzGT7Nnauy9m7ui60NUXNeJTludFUE0mveIvpGG7VtAcBu1JnaBi8a+TIokh/Uas3GU5MewKzFQNLIWAgK/itRowRhE7j82eiSVkSfpsSsJ5jv9L0CAwEAAaOBvjCBuzAOBgNVHQ8BAf8EBAMCBkAwgYkGCCsGAQUFBwEBBH0wezA6BggrBgEFBQcwAYYuaHR0cDovL2xvY2FsaG9zdDo5OTk5L3BraS1mYWN0b3J5L29jc3AvZ29vZC1jYTA9BggrBgEFBQcwAoYxaHR0cDovL2xvY2FsaG9zdDo5OTk5L3BraS1mYWN0b3J5L2NydC9nb29kLWNhLmNydDAdBgNVHQ4EFgQUPlAIV+kh0KlMx6mE+4bMohxkbDYwDQYJKoZIhvcNAQELBQADggEBADGSvZnOZiYIbApHbL0EIpJo2tCqx7g2Fcko/hdPWQIEt9v3+Y3xKeaMh7Wq40lBK69c6kGpC+SzE9H2HBA6NSGaseELq7u1eR6Ue9DeQ+PfPhJNsEXoyZnf6CmGb36hZy259nWXG3M5eMHI7X5l8hqjDWitGSuUboxcyDEsue/JZPgIk5xUX4iX0j4plqfy2edfe8Ligg9AhUO9V88mBhqwej0hVbNn/u6BN6dFEdRFBgydgzR+JdVaDmuv45ZIbj5XqIu6N9XQNNCX3jn3KRUU9fpwFVszImBb3fR9iMH2GrMPh91xNfQt57XIsEXkm+2RoaoFek251hwtcearDKQ=");
		CertificateToken caToken = DSSUtils.loadCertificateFromBase64EncodedString("MIID7DCCAtSgAwIBAgIBBDANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjIwMjE3MTQ0OTMwWhcNMjMxMjE3MTQ0OTMwWjBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCH4RAJ31B/gWM2xATbgVgC+EPxx/bWLuo75jy3IHLboYGrXnn/+Jy8+t3kgmjLK7De5vYBYWd6fICpJJ9JVGGzqvuFV7/N1LnUYL2dQLLXCnWSvUiSp+hxjolRbZLtST13FrLOzB3iM8FNFcK9T3qEkr5ZACg5Bk3Zr14E2zTKPdt+JlcCyJq+bxDJR6eZ1hIW5bnWGFX8c89mIkBfYcj75CjdtlXBAmC+hAxLRz1HFtSJ5JvxqFRLDS1q3g4FIjpZjBq93fqjPrrzxGsQZekZ3ey+CegxvPXVbmuFPBJh2Yu2Lpv1pOhtqIsJ+XXBpzjzOAsOisfttqlYEn0rVh41AgMBAAGjgdYwgdMwDgYDVR0PAQH/BAQDAgEGMEIGA1UdHwQ7MDkwN6A1oDOGMWh0dHA6Ly9sb2NhbGhvc3Q6OTk5OS9wa2ktZmFjdG9yeS9jcmwvcm9vdC1jYS5jcmwwTQYIKwYBBQUHAQEEQTA/MD0GCCsGAQUFBzAChjFodHRwOi8vbG9jYWxob3N0Ojk5OTkvcGtpLWZhY3RvcnkvY3J0L3Jvb3QtY2EuY3J0MB0GA1UdDgQWBBQZEFtAkIJAlX3XLEDvh33My0dfnzAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBaSgQiLZltCs64ISc7dI+4pmGpyEZ3AXU80R1vETqkcVshIECu7yRcKXjXuZQWh0xQOAINylDOVhSBL3fH/qkYcca7oYpDMNQLk95FjCJW0m3YJzHQO5YhmCx68SY3c5X8ktfNkcgZGyei1kwy4NMN0cVyEFkdz+uJ/r80GLADPNGW3dKb17OGtYxHfCEBl8gA3t5YBouXbnjx/gSlItRINorWrzZElg6lo5w0Pzbmp6ZR0bU6hEGZ+74eOALI9gj4chncU+rq/IXJeqyFxsQOsePLRpaXf05UHa8AJCWoy4gsmMtOLEYtwjngXrwxKn6hySkuWJrL4i8VkzPgAVDb");

		String ocspBinaries = "MIIIkwoBAKCCCIwwggiIBgkrBgEFBQcwAQEEggh5MIIIdTCBgaADAgEBohYEFFxG77BzqavAM8Ldnx0NzidDaO1kGA8yMDIzMDExNzE0NTQwOVowUTBPMDowCQYFKw4DAhoFAAQULFsRCayq2JfWOw4G6WfL7rWAHDQEFBkQW0CQgkCVfdcsQO+HfczLR1+fAgEKgAAYDzIwMjMwMTE3MTQ1NDA5WjANBgkqhkiG9w0BAQsFAAOCAQEAp+Vm+WhWOarGHB7A1sk6gZT5jEfUize594ZWuneDjmp4irilgCn+wU/Xw++4fbI+P9FHNI8mcZUpN5ailNBHB3aDwfEc7DW/GY20IbdxQVRxu/h/keu1lXk/EpB2XR9PpElEVIipPhN+ZoMHaok9RZ9fFlHXevF9jHCgken/muaCkNEa+xXfn2qLIlbq2KAF9Gc/zZ3VfSiKAEQ6ZGymbS5Ww1NVuCNdyFiTxPMmqJ3qmfSh0LRo1YSlqi+ZOcunlyphdt/nHFHVePVdfoZY2m761eEvgtr26R8hVy1IiSbnY0dI979BsfZHjcIdr0nI9TGQZkVsc6biTbNjoYlXbqCCBtkwggbVMIIDdjCCAl6gAwIBAgIBAjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjIwMTE3MTQ0OTMwWhcNMjQwMTE3MTQ0OTMwWjBUMRcwFQYDVQQDDA5vY3NwLXJlc3BvbmRlcjEZMBcGA1UECgwQTm93aW5hIFNvbHV0aW9uczERMA8GA1UECwwIUEtJLVRFU1QxCzAJBgNVBAYTAkxVMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqKz+HKedz8/Cx7wPwvIOJ5hgFhmWjq15vC+FCBM6Rp4/9NqXu8Oh3a0KJFJCwQ5atE1N+I/FNRbKUV3tFfKUYsn6yjTjEy8jNQa0o/15Aupt5EQDYMdc0AJl1nahYM7dwMgb33x4oR3EkfZ4Rmq1DTVPs/hdNqyw8RnSjyVbXPaT8ruTpyjHbk5pbruLIxv8HtU621Y1M9JSCQ1aKz9mPRDJd6f549PKDTeQigwlYcEKf3GhHtXDBP2Cb+MTWy8Vwy0IS0MBoAitcFicUhOQYxBOxdGO0F/AzGdfErx9x0E67jT5hRuBBUizpBu2ksHeRmqqLLNv0aYTeBQgmtKXyQIDAQABo1owWDAOBgNVHQ8BAf8EBAMCB4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwkwHQYDVR0OBBYEFFxG77BzqavAM8Ldnx0NzidDaO1kMA8GCSsGAQUFBzABBQQCBQAwDQYJKoZIhvcNAQELBQADggEBAE/z0GWDNoczOPl0yQGFvg4lqrIPL7k3mJJT4UxADIOzhkW2NSII2Sn4aVNj7VspfR79azSp2yl+jcEA3FiXG8qPscQiCTDKNwH8C3ZtXZ/h8N13sDGWocVBazOFadO406jIrpRjpWiJRhBbtU006ZAEyeYaCv23kFkpmjdfFYJeelvVxz0Tp9g22cWyF6oHJO1mb+nRR81sySbhvgNPQO0DD8aEKw0MjNzJKq6FV+1D/x2Y+0PlhgMUF7WUci1Ja/MSa6oahgzJB/TuyQ787Fy9Kpnq/wjRaoLc+vqflX5KslTO8OcEs+AzOoucYwmgFjTY3IhbalczpI4uawJUGqYwggNXMIICP6ADAgECAgEBMA0GCSqGSIb3DQEBDQUAME0xEDAOBgNVBAMMB3Jvb3QtY2ExGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTAeFw0yMjAxMTcxNDQ5MjlaFw0yNDAxMTcxNDQ5MjlaME0xEDAOBgNVBAMMB3Jvb3QtY2ExGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMID1iB4dO6UDpI+iwAyrkan9mcHtwOmfux6yRgBaKxgXY9L+wIQ0NIJ911pgE04NIzcikSeuKx3XERrrV6znkWDMOblGAbJBA7wDlx0Kb9uaxjFU+3SW/L9j7HBZk4McXK3Qp3offrmkmLQlRS83OFkNQGQN19Ehpnt2Ve0RGhjNrrxWNhgX5cwtiIA554PrqM/aVmUsz/vfEAPp7TZdV1jnrkJ4G65MRvIgQM9dI+rJFKRZ/pCuKHAScIuhS1QSZ27kdvrVCt0Nm2u6jT5wYg7RKt0K7wjsH3s7HAkgD2G2z6qtJwH+/14v3BBa2sHIZvhCwHWudfjSOFR969B97kCAwEAAaNCMEAwDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRLdw8SJf4ueL3Mu2chdY8LBzjxljAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4IBAQBa0PVJ4m4kTVYGcA7CqXd7Eb/koeOyHrmkgY5ZPplsAieUQiVY9Tm0VNZVlBm13Jn2ZuoXmUuSPWKExY53Dfz1gwbk6dwVR/SeuM+OK+mEw/ooEiaTESluENp9j1f+yzMeKIL/kILV6hvm/u4pv4ko9DU/bRM0G9J6HxNZMY2GBZaA1X6ClkaoTpccxm8c+aLIxA7J5dnIN6Sq1tA7ur7Uropc4i7KzM0KS8D9Hopkcd7AUhMDvs5J3nGmp5qbaWWikGpQj9eEdVSAT3/GC4AQS6bklS/nLcfeElS7MwYYiUyNC8vsKUO4/IsaI6DocuUB/ZLDtd8ErCmo6s5O0h6Z";

		ExternalResourcesOCSPSource ocspSource = new ExternalResourcesOCSPSource(new ByteArrayInputStream(Utils.fromBase64(ocspBinaries)));

		List<RevocationToken<OCSP>> revocationTokens = ocspSource.getRevocationTokens(certToken, caToken);
		assertEquals(1, revocationTokens.size());

		OCSPToken ocspToken = (OCSPToken) revocationTokens.get(0);

		assertEquals(SignatureValidity.VALID, ocspToken.getSignatureValidity());
		assertTrue(ocspToken.isSignatureIntact());
		assertFalse(ocspToken.isValid());

		assertEquals(2, ocspToken.getOCSPTokenVersion());
		assertEquals("Basic OCSP Response version is invalid (shall be v1)!", ocspToken.getInvalidityReason());
	}

}
