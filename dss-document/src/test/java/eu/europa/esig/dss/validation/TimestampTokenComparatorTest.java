/**
 * DSS - Digital Signature Services
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 * 
 * This file is part of the "DSS - Digital Signature Services" project.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.esig.dss.validation;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;

import org.junit.jupiter.api.Test;

import eu.europa.esig.dss.enumerations.TimestampType;
import eu.europa.esig.dss.enumerations.TimestampedObjectType;
import eu.europa.esig.dss.utils.Utils;
import eu.europa.esig.dss.validation.timestamp.TimestampToken;
import eu.europa.esig.dss.validation.timestamp.TimestampTokenComparator;
import eu.europa.esig.dss.validation.timestamp.TimestampedReference;

public class TimestampTokenComparatorTest {

	@Test
	public void test() throws Exception {

		TimestampTokenComparator comparator = new TimestampTokenComparator();

		String firstBinaries = "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";
		TimestampToken firstTimestampToken = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.SIGNATURE_TIMESTAMP);
		TimestampToken firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.SIGNATURE_TIMESTAMP);

		assertEquals(0, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(0, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.CONTENT_TIMESTAMP);

		assertEquals(1, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(-1, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.ARCHIVE_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(1, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries),
				TimestampType.SIGNATURE_TIMESTAMP,
				Arrays.asList(new TimestampedReference("", TimestampedObjectType.TIMESTAMP)));

		assertEquals(-1, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(1, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		String secondBinaries = "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";
		TimestampToken secondTimestampToken = new TimestampToken(Utils.fromBase64(secondBinaries), TimestampType.SIGNATURE_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(1, comparator.compare(secondTimestampToken, firstTimestampToken));

		secondTimestampToken = new TimestampToken(Utils.fromBase64(secondBinaries), TimestampType.CONTENT_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(1, comparator.compare(secondTimestampToken, firstTimestampToken));

		secondTimestampToken = new TimestampToken(Utils.fromBase64(secondBinaries),
				TimestampType.SIGNATURE_TIMESTAMP,
				Arrays.asList(new TimestampedReference("", TimestampedObjectType.TIMESTAMP)));

		assertEquals(-1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(1, comparator.compare(secondTimestampToken, firstTimestampToken));

	}
	
	@Test
	public void coverageTest() throws Exception {
		TimestampTokenComparator comparator = new TimestampTokenComparator();
		
		String firstBinaries = "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";
		TimestampToken firstTimestampToken = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.ARCHIVE_TIMESTAMP);
		
		String secondBinaries = "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";
		TimestampToken secondTimestampToken = new TimestampToken(Utils.fromBase64(secondBinaries), TimestampType.ARCHIVE_TIMESTAMP);

		assertEquals(0, comparator.compare(firstTimestampToken, secondTimestampToken));
		
		firstTimestampToken.getTimestampedReferences().add(new TimestampedReference("Id-1", TimestampedObjectType.SIGNED_DATA));
		firstTimestampToken.getTimestampedReferences().add(new TimestampedReference("Id-2", TimestampedObjectType.SIGNED_DATA));

		assertEquals(1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(-1, comparator.compare(secondTimestampToken, firstTimestampToken));

		secondTimestampToken.getTimestampedReferences().add(
				new TimestampedReference(firstTimestampToken.getDSSIdAsString(), TimestampedObjectType.TIMESTAMP));

		assertEquals(-1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(1, comparator.compare(secondTimestampToken, firstTimestampToken));
	}

}
